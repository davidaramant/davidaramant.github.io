<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buddhabrot on David Aramant&#39;s Blog</title>
    <link>https://davidaramant.github.io/tags/buddhabrot/</link>
    <description>Recent content in Buddhabrot on David Aramant&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://davidaramant.github.io/tags/buddhabrot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In Defense of Brent&#39;s Cycle Detection Algorithm</title>
      <link>https://davidaramant.github.io/post/brents-cycle-detection-algorithm/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/brents-cycle-detection-algorithm/</guid>
      <description>In my earlier series about the Buddhabrot I vilely slandered Brent&amp;rsquo;s Cycle Detection Algorithm as &amp;ldquo;kind of a dud.&amp;rdquo; Well, I&amp;rsquo;m 99% sure I implemented it wrong the first time I tried it out (oops) so I think it&amp;rsquo;s time to give it a fairer shot.
I came across the concept of an automatic iteration limit algorithm for finding out whether a point is inside the Mandelbrot set. In this method, there isn&amp;rsquo;t an explicit maximum iteration count passed in - it will only stop iterating if the point escapes or it detects a cycle.</description>
    </item>
    
    <item>
      <title>The Buddhabrot Part 5: The Big Reveal</title>
      <link>https://davidaramant.github.io/post/the-buddhabrot-part-5/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/the-buddhabrot-part-5/</guid>
      <description>I think it&amp;rsquo;s high time to show off the big version&amp;hellip;
Series Overview  Part 1 - What is the Mandelbrot set? Part 2 - What is the Buddhabrot? Part 3 - Algorithmic Optimizations Part 4 - Code Optimizations Part 5 - The Big Reveal  The 68.7 Gigapixel Buddhabrot Tada! You can pan around and use the mouse wheel to zoom in/out. It should work fine on mobile too.</description>
    </item>
    
    <item>
      <title>The Buddhabrot Part 4: Code Optimizations</title>
      <link>https://davidaramant.github.io/post/the-buddhabrot-part-4/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/the-buddhabrot-part-4/</guid>
      <description>OK - we&amp;rsquo;ve drastically reduced the amount of work we have to do, so now let&amp;rsquo;s try to optimize what&amp;rsquo;s left as much as possible.
Series Overview  Part 1 - What is the Mandelbrot set? Part 2 - What is the Buddhabrot? Part 3 - Algorithmic Optimizations Part 4 - Code Optimizations Part 5 - The Big Reveal  A note on benchmarks&amp;hellip; Benchmarks are hard.
 There are three kinds of lies: lies, damned lies, and statistics benchmarks.</description>
    </item>
    
    <item>
      <title>The Buddhabrot Part 3: Algorithmic Optimizations</title>
      <link>https://davidaramant.github.io/post/the-buddhabrot-part-3/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/the-buddhabrot-part-3/</guid>
      <description>In the last part we learned what the Buddhabrot is and why it&amp;rsquo;s pretty slow to generate. As a recap, my version of it uses the following values:
 Minimum iteration limit: 1,000,000 Maximum iteration limit: 5,000,000 Size: 68,719,476,736 pixels (262,144 x 262,144)  Series Overview  Part 1 - What is the Mandelbrot set? Part 2 - What is the Buddhabrot? Part 3 - Algorithmic Optimizations Part 4 - Code Optimizations Part 5 - The Big Reveal  Algorithmic Optimizations  The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.</description>
    </item>
    
    <item>
      <title>The Buddhabrot Part 2: What is the Buddhabrot?</title>
      <link>https://davidaramant.github.io/post/the-buddhabrot-part-2/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/the-buddhabrot-part-2/</guid>
      <description>In the last part we learned what the Mandelbrot set is.
Series Overview  Part 1 - What is the Mandelbrot set? Part 2 - What is the Buddhabrot? Part 3 - Algorithmic Optimizations Part 4 - Code Optimizations Part 5 - The Big Reveal  Visualizing the Mandelbrot Set With what we&amp;rsquo;ve talked about so far, we can make a very crisp, black-and-white version:
That&amp;rsquo;s cool and all, but normally when you see the Mandelbrot set there&amp;rsquo;s more going on than this.</description>
    </item>
    
    <item>
      <title>The Buddhabrot Part 1: What is the Mandelbrot set?</title>
      <link>https://davidaramant.github.io/post/the-buddhabrot-part-1/</link>
      <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidaramant.github.io/post/the-buddhabrot-part-1/</guid>
      <description>At the inaugural Indy.Code() conference I presented on how I generated a 68.7 gigapixel rendering of the Buddhabrot fractal. For now, all you need to know is that it&amp;rsquo;s this thing&amp;hellip;
&amp;hellip;but really, really gigantic.
In this series I&amp;rsquo;ll explain what the Buddhabrot is and how I made my version.
Series Overview  Part 1 - What is the Mandelbrot set? Part 2 - What is the Buddhabrot? Part 3 - Algorithmic Optimizations Part 4 - Code Optimizations Part 5 - The Big Reveal  Introduction I was introduced to the Buddhabrot in a college class about fractals (technically, it was about Chaotic Dynamical Systems but I don&amp;rsquo;t remember too much about that).</description>
    </item>
    
  </channel>
</rss>